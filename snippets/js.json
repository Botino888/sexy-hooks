{
	"useState": {
		"prefix": "sexyState",
		"body": [
			"$3import { useState } from 'react';",
			"$4/*",
			"* => Returns a value with a state and a function to update it",
			"* => During subsequent re-renderings, the first value returned by useState will always be the most recent state after applying updates",
			"* => useState does not merge update objects automatically,",
			"* => Object.assign or return {...prevState, ...updatedValues};",
			"* => Another option is useReducer, which is more suitable for managing state objects containing multiple values.",
			"* => source: https://en.reactjs.org/docs/hooks-reference.html#usestate",
			"*/",
			"const [${1:state}, set${1:state}] = useState(${2:state});"
		],
		"description": "useState"
	},
	"useEffect": {
		"prefix": "sexyEffect",
		"body": [
			"$3import { useEffect } from 'react';",
			"$4/*",
			"* => Delayed until the browser renders",
			"* => Run after each completed render",
			"* => It is guaranteed to work before any new renders",
			"* => React always fully applies the effects of the previous render before starting a new update.",
			"* => source: https://en.reactjs.org/docs/hooks-reference.html#useeffect",
			"*/",
			"useEffect(() => {  ",
			"    const ${1:_subs} = ${2:props}.subscribe();",
			"    // Clear subscribe",
			"    return () => ${1:_subs}.unsubscribe();",
			"}, [${5:}]);",
			""
		],
		"description": "useEffect"
	},
	"useContext": {
		"prefix": "sexyContext",
		"body": [
			"$3import { useContext} from \"react\";",
			"import ${1:MyContext} from './context/${1:MyContext}';",
			"",
			"$4/*",
			"* => The current context value is determined by prop,",
			"* => value of the nearest <MyContext.Provider> above the caller in the tree.",
			"* => Remember, the argument for useContext must be the context object itself:",
			"* => Correct: useContext(MyContext)",
			"* => Incorrect: useContext(MyContext.Consumer)",
			"* => Incorrect: useContext(MyContext.Provider)",
			"* => ! The component that calls useContext will always be re-rendered when the context value changes.",
			"* => If re-rendering a component is expensive, you can optimize it by memorizing",
			"* => source: https://en.reactjs.org/docs/hooks-reference.html#usecontext",
			"*/",
			"const ${0:_context} = useContext(${1:MyContext});"
		],
		"description": "useContext"
	},

	"useReducer": {
		"prefix": "sexyReducer",
		"body": [
			"$3import { useReducer } from \"react\";",
			"",
			"$4/*",
			"* => The useReducer hook is usually preferable to useState when you have complex state logic",
			"* => that includes multiple values, or when the next state depends on the previous one.",
			"* => useReducer also allows you to optimize the performance of components that trigger deep updates, ",
			"* => since you can pass dispatch instead of callbacks.",
			"* => React ensures that the identity of the dispatch function is stable and does not change with repeated renders.",
			"* => Therefore, it can be safely omitted from the useEffect and useCallback hook dependency lists.",
			"* => If you return the same value from the hook reducer as the current state,",
			"* => React will exit without redrawing the children or triggering effects. (React uses the Object.is comparison algorithm.)",
			"* => If you do expensive calculations during rendering, you can optimize them with useMemo",
			"* => source: https://en.reactjs.org/docs/hooks-reference.html#usereducer",
			"",
			"*/",
			"",
			"const ${0:initialState} = {${1:count}: 0};",
			"function reducer(state, action) {",
			"  switch (action.type) {",
			"    case 'increment':",
			"      return {count: state.count + 1};",
			"    case 'decrement':",
			"      return {count: state.count - 1};",
			"    default:",
			"      throw new Error();",
			"  }",
			"}",
			"function ${2:Counter}() {",
			"  const [state, dispatch] = useReducer(reducer, ${0:initialState});",
			"  return (",
			"    <>",
			"      Count: {state.count}",
			"      <button onClick={() => dispatch({type: 'decrement'})}>-</button>",
			"      <button onClick={() => dispatch({type: 'increment'})}>+</button>",
			"    </>",
			"  );",
			"}"
		],
		"description": "useReducer"
	},
	"useLazyReducer": {
		"prefix": "sexyLazyReducer",
		"body": [
			"$1import { useReducer } from \"react\";",
			"",
			"$2/*",
			"* => Lazy initialization",
			"* => You can also create an initial state lazily. To do this,",
			"* => you can pass the init function as the third argument.",
			"* => The initial state will be set equal to the result of calling init (initialArg).",
			"* => This allows you to extract the logic for calculating the initial state outside the reducer. ",
			"* => It is also convenient for resetting later in response to an action.",
			"* => source: https://en.reactjs.org/docs/hooks-reference.html#useReducer",
			"*/",
			"",
			"$3function init(initialCount) {",
			"  return {count: initialCount};",
			"}",
			"",
			"$4function reducer(state, action) {",
			"  switch (action.type) {",
			"    case 'increment':",
			"      return {count: state.count + 1};",
			"    case 'decrement':",
			"      return {count: state.count - 1};",
			"    case 'reset':",
			"      return init(action.payload);",
			"    default:",
			"      throw new Error();",
			"  }",
			"}",
			"",
			"$5function Counter({initialCount}) {",
			"  const [state, dispatch] = useReducer(reducer, initialCount, init);",
			"  return (",
			"    <>",
			"      Count: {state.count}",
			"      <button",
			"        onClick={() => dispatch({type: 'reset', payload: initialCount})}>",
			"",
			"        Reset",
			"      </button>",
			"      <button onClick={() => dispatch({type: 'decrement'})}>-</button>",
			"      <button onClick={() => dispatch({type: 'increment'})}>+</button>",
			"    </>",
			"  );",
			"}",
			""
		],
		"description": "useLazyReducer"
	},
	"useCallback": {
		"prefix": "sexyCallback",
		"body": [
			"$0import { useCallback } from 'react';",
			"",
			"$1/*",
			"* useCallback(fn, deps) === useMemo(() => fn, deps)",
			"* => Pass inline callback and array of dependencies.",
			"* => The useCallback hook will return a memorized version of the callback, ",
			"* => which only changes if the values ​​of one of the dependencies change. ",
			"* => This is useful when passing callbacks to optimized child components ",
			"* => that rely on link equality to prevent unnecessary rendering (e.g. shouldComponentUpdate).",
			"* => We recommend that you use the exhaustive-deps rule,",
			"* => which is part of our lint rule package eslint-plugin-react-hooks. ",
			"* => It warns when dependencies are incorrect and suggests a fix.",
			"* => source: https://en.reactjs.org/docs/hooks-reference.html#usecallback",
			"*/",
			"const ${2:memorizedCallback} = useCallback(",
			"  () => {",
			"    ${3:doSomething}(a, b);",
			"  },",
			"  [${4:a}, ${5:b}],",
			");"
		],
		"description": "useCallback"
	},
	"useMemo": {
		"prefix": "sexyMemo",
		"body": [
			"$0import { useMemo } from 'react';",
			"",
			"$1/*",
			"* => Pass the “creating” function and an array of dependencies.",
			"* => useMemo will recalculate the memorized value ",
			"* => only when the value of any of the dependencies has changed. ",
			"* => This optimization helps to avoid costly calculations with each render.",
			"* => Remember that the function passed to useMemo runs during rendering. ",
			"* => Don’t do anything there that you usually don’t do during rendering. ",
			"* => For example, side effects belong to useEffect",
			"* => ! If the array has not been transferred, a new value will be calculated at each render",
			"* => You can use useMemo as a performance optimization, and not as a semantic guarantee.",
			"* => In the future, React may decide to “forget” some previously memorized values ​​and recount them at the next render, for example,",
			"* => to free memory for components outside the scope of the screen.",
			"* => ! Write your code so that it still works without useMemo, and then add it to optimize performance.",
			"* => source: https://en.reactjs.org/docs/hooks-reference.html#usememo",
			"*/",
			"const ${2:memorizedValue} = useMemo(() => ${3:computeExpensiveValue}(${4:a}, ${5:b}), [${4:a}, ${5:b}]);"
		],
		"description": "useMemo"
	},
	"useRef": {
		"prefix": "sexyRef",
		"body": [
			"$0import { useRef } from 'react';",
			"",
			"$1/*",
			"* => useRef returns a mutable ref object whose .current property is initialized with the passed argument (initialValue).",
			"* => The returned object will be retained throughout the lifetime of the component.",
			"* => ! In essence, useRef is like a “box” that can contain a mutable value in its .current property.",
			"* => This is possible because useRef () creates a regular JavaScript object.",
			"* => The only difference between useRef () and just creating the {current: ...} object itself is that the useRef hook will give the same object with a ref for each render.",
			"* => ! Keep in mind that useRef does not notify you when its contents change. ",
			"* => Mutation of the .current property does not cause re-rendering. ",
			"* => If you want to run some code when React attaches or detaches ref to the DOM node, you can use callback instead.",
			"* => source: https://en.reactjs.org/docs/hooks-reference.html#useref",
			"*/",
			"",
			"function ExampleTextInputWithFocusButton() {",
			"  const inputEl = useRef(null);",
			"  const onButtonClick = () => {",
			"    // `current` point to mount element `input`",
			"    inputEl.current.focus();",
			"  };",
			"  return (",
			"    <>",
			"      <input ref={inputEl} type=\"text\" />",
			"      <button onClick={onButtonClick}>Focus on field</button>",
			"    </>",
			"  );",
			"}"
		],
		"description": "useRef"
	},
	"useImperativeHandle": {
		"prefix": "sexyImperativeHandle",
		"body": [
			"$0import { forwardRef, useRef, useImperativeHandle } from 'react';",
			"",
			"$1/*",
			"* => useImperativeHandle adjusts the instance value that is provided to the parent components when using ref.",
			"* => As always, in most cases, imperative code that uses links should be avoided. useImperativeHandle should be used with forwardRef:",
			"* => In this example, the parent component that displays <FancyInput ref = {fancyInputRef} /> will be able to call fancyInputRef.current.focus ().",
			"* => source: https://en.reactjs.org/docs/hooks-reference.html#useimperativehandle",
			"*/",
			"",
			"function FancyInput(props, ref) {",
			"  const inputRef = useRef();",
			"  useImperativeHandle(ref, () => ({",
			"    focus: () => {",
			"      inputRef.current.focus();",
			"    }",
			"  }));",
			"  return <input ref={inputRef} ... />;",
			"}",
			"FancyInput = forwardRef(FancyInput);"
		],
		"description": "useImperativeHandle"
	},
	"useLayoutEffect": {
		"prefix": "sexyLayoutEffect",
		"body": [
			"$0import { useLayoutEffect } from 'react';",
			"",
			"$1/*",
			"* => work in componentDidMount и componentDidUpdate phase",
			"* => !! The signature is identical to useEffect, but this hook is launched synchronously after all DOM changes. ",
			"* => ! Use it to read the layout from the DOM and synchronously re-render. ",
			"* => Updates planned inside useLayoutEffect will be fully applied synchronously before the browser gets a chance to render.",
			"* => !! Prefer standard useEffect when possible to avoid blocking visual updates.",
			"* => If you use server-side rendering, keep in mind that neither useLayoutEffect nor useEffect can work before loading JavaScript. ",
			"* => This is why React warns when the server component contains useLayoutEffect. To deal with this problem, either move this logic to useEffect (if it is not needed for the first render),",
			"* => or delay the display of this component until rendering on the client side (if HTML is incorrect before using useLayoutEffect).",
			"* => To exclude a component that needs layout effects from the HTML received as a result of server rendering, render it according to the showChild && <Child /> condition and postpone the display using useEffect (() => {setShowChild (true);}, []).",
			"* => Thus, the user interface will not look incorrect before hydration.",
			"* => source: https://en.reactjs.org/docs/hooks-reference.html#uselayouteffect",
			"* => example: https://codesandbox.io/s/7y96862n2q",
			"",
			"*/"
		],
		"description": "useLayoutEffect"
	},
	"useDebugValue": {
		"prefix": "sexyDebugValue",
		"body": [
			"$0import { useDebugValue } from 'react';",
			"",
			"$1/*",
			"* => useDebugValue can be used to display tags for custom hooks in React DevTools.",
			"* => We do not recommend adding debug values ​​to each user hook. ",
			"* => This is most valuable for custom hooks that are part of shared libraries.",
			"* => source: https://en.reactjs.org/docs/hooks-reference.html#usedebugvalue",
			"",
			"*/",
			"",
			"function useFriendStatus(friendID) {",
			"  const [isOnline, setIsOnline] = useState(null);",
			"",
			"  // ...",
			"",
			"  // Show marker in DevTools with this hook",
			"  // exm, «Friend Status: online»",
			"  useDebugValue(isOnline ? 'online' : 'offline');",
			"",
			"  return isOnline;",
			"}"
		],
		"description": "useDebugValue"
	},
	"useInputValue": {
		"prefix": "sexyInputValue",
		"body": [
			"$0import { useState } from \"react\";",
			"source: https://levelup.gitconnected.com/two-simple-reusable-custom-hooks-for-your-react-apps-a0275724f8ab",
			"export const useInputValue = initialValue => {",
			"  const [value, setValue] = useState(initialValue);",
			"   return {",
			"     value,",
			"     onChange: e => { ",
			"      setValue(e.target.value || e.target.innerText);",
			"    };  ",
			"  };",
			"};",
			"$1/* How to:",
			"const email = useInputValue(\"\");",
			"const password = useInputValue(\"\"); ",
			"const handleSubmit = e => {    ",
			"  e.preventDefault();    ",
			"  loginUser(email.value, password.value);",
			"};",
			"<input type=\"text\" placeholder=\"Email\" {...email} />",
			"<input type=\"password\" placeholder=\"Password\" {...password} />",
			"*/"
		],
		"description": "useInputValue"
	},
	"useToggle": {
		"prefix": "sexyToggle",
		"body": [
			"$0import { useState, useCallback } from \"react\";",
			"source: https://levelup.gitconnected.com/two-simple-reusable-custom-hooks-for-your-react-apps-a0275724f8ab",
			"export const useToggle = (initial) => {",
			"  const [open, setOpen] = useState(initial);",
			"  return [open, useCallback(() => setOpen(status => !status), [open])];",
			"};",
			"",
			"/* How to:",
			"import { useToggle } from \"../hooks/useToggle\";",
			"const [open, toggle] = useToggle(false);",
			"<Button onClick={toggle}>Refine search</Button>",
			"*/"
		],
		"description": "useToggle"
	},
	"useCustoms": {
		"prefix": "sexyCustomsInfo",
		"body": [
			"/*",
			"* on 17.10.2019",
			"* $0==== useArray hook ==== ",
			"* run: yarn add react-hanger or npm i -S react-hanger",
			"* use: import { useArray } from 'react-hanger';",
			"* source: https://www.npmjs.com/package/react-hanger",
			"*",
			"* $1==== useFormState hook ====",
			"* run: yarn add react-use-form-state or npm i -S react-use-form-state",
			"* use: import { useFormState } from 'react-use-form-state';",
			"* source: https://www.npmjs.com/package/react-use-form-state",
			"*",
			"* $2==== useFetch hook ====",
			"* run: yarn add react-fetch-hook or npm i -S react-fetch-hook",
			"* use: import { useFetch } from 'react-fetch-hook';",
			"* source: https://www.npmjs.com/package/react-fetch-hook",
			"*",
			"* $3==== useMedia hook ====",
			"* run: yarn add use-media or npm i -S use-media",
			"* use: import { useMedia } from 'use-media';",
			"* source: https://www.npmjs.com/package/use-media",
			"*",
			"* $4==== usePortal hook ====",
			"* run: yarn add react-useportal or npm i -S react-useportal",
			"* use: import { usePortal } from 'react-useportal';",
			"* source: https://www.npmjs.com/package/react-useportal",
			"*",
			"* $5==== useAuthState hook ====",
			"* run: yarn add react-firebase-hooks or npm i -S react-firebase-hooks",
			"* use: import { useAuthState } from 'react-firebase-hooks/auth';",
			"* source: https://www.npmjs.com/package/react-firebase-hooks/auth",
			"*",
			"* $6==== useLocation hook ====",
			"* run: yarn add react-use or npm i -S react-use ",
			"* use: import { useLocation } from 'react-use';",
			"* source: https://www.npmjs.com/package/react-use",
			"*/"
		],
		"description": "useCustoms"
	}
}
